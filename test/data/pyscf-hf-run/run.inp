import numpy as np
import numpy
import pyscf
import pyscf.gto
import pyscf.qmmm
import pyscf.scf
import pyscf.dft
import pyscf.lib
from pyscf.data import nist
import matplotlib.pyplot as plt
import basis_set_exchange as bse

angstrom = 1 / 0.52917721067

mol = pyscf.gto.Mole()
mol.atom = "7 0.000000 0.000000 0.000000;7 0.000000 0.000000 1.000000"
mol.basis = {7: '#----------------------------------------------------------------------\n# Basis Set Exchange\n# Version v0.7.0\n# https://www.basissetexchange.org\n#----------------------------------------------------------------------\n#   Basis set: 6-31G\n# Description: 6-31G valence double-zeta\n#        Role: orbital\n#     Version: 1  (Data from Gaussian 09/GAMESS)\n#----------------------------------------------------------------------\n\n\nBASIS "ao basis" PRINT\n#BASIS SET: (10s,4p) -> [3s,2p]\nN    S\n      0.4173511460E+04       0.1834772160E-02\n      0.6274579110E+03       0.1399462700E-01\n      0.1429020930E+03       0.6858655181E-01\n      0.4023432930E+02       0.2322408730E+00\n      0.1282021290E+02       0.4690699481E+00\n      0.4390437010E+01       0.3604551991E+00\nN    SP\n      0.1162636186E+02      -0.1149611817E+00       0.6757974388E-01\n      0.2716279807E+01      -0.1691174786E+00       0.3239072959E+00\n      0.7722183966E+00       0.1145851947E+01       0.7408951398E+00\nN    SP\n      0.2120314975E+00       0.1000000000E+01       0.1000000000E+01\nEND\n'}
mol.verbose = 0
mol.build()

method = "HF"
if method not in ["CCSD", "HF"]:
    raise NotImplementedError("Method %s not supported." % method)

deltaZ = np.array((0.04999999999999982,0.0))
includeonly = np.array((0,1))


def add_qmmm(calc, mol, deltaZ):
    mf = pyscf.qmmm.mm_charge(calc, mol.atom_coords() / angstrom, deltaZ)

    class NoSelfQMMM(mf.__class__):
        def energy_nuc(self):
            q = mol.atom_charges().astype(np.float)
            q[includeonly] += deltaZ
            return mol.energy_nuc(q)

    return NoSelfQMMM()


if method == "HF":
    calc = add_qmmm(pyscf.scf.RHF(mol), mol, deltaZ)
    hfe = calc.kernel(verbose=0)
    dm1_ao = calc.make_rdm1()
    total_energy = calc.e_tot
if method == "CCSD":
    calc = add_qmmm(pyscf.scf.RHF(mol), mol, deltaZ)
    hfe = calc.kernel(verbose=0)
    mycc = pyscf.cc.CCSD(calc).run()
    dm1 = mycc.make_rdm1()
    dm1_ao = np.einsum("pi,ij,qj->pq", calc.mo_coeff, dm1, calc.mo_coeff.conj())
    total_energy = mycc.e_tot

# GRIDLESS, as things should be ############################
# Total energy of SCF run

print("TOTAL_ENERGY", total_energy)

# Electronic EPN from electron density
for site in includeonly:
    mol.set_rinv_orig_(mol.atom_coords()[site])
    print("ELECTRONIC_EPN", site, np.matmul(dm1_ao, mol.intor("int1e_rinv")).trace())

# Electronic Dipole w.r.t to center of geometry
with mol.with_common_orig(mol.atom_coords().mean(axis=0)):
    ao_dip = mol.intor_symmetric("int1e_r", comp=3)
dipole = numpy.einsum("xij,ji->x", ao_dip, dm1_ao).real
print("ELECTRONIC_DIPOLE", *dipole)

# GRID, as things were #####################################
grid = pyscf.dft.gen_grid.Grids(mol)
grid.level = 3
grid.build()
ao_value = pyscf.dft.numint.eval_ao(mol, grid.coords, deriv=0)
rho = pyscf.dft.numint.eval_rho(mol, ao_value, dm1_ao, xctype="LDA")

# Ionic Forces
for site in includeonly:
    rvec = grid.coords - mol.atom_coords()[site]
    force = [
        (rho * grid.weights * rvec[:, _] / np.linalg.norm(rvec, axis=1) ** 3).sum()
        for _ in range(3)
    ]
    print("IONIC_FORCE", site, *force)

# Quadrupole moments
rs = grid.coords - mol.atom_coords().mean(axis=0)
ds = np.linalg.norm(rs, axis=1) ** 2
# Q = np.zeros((3,3))
for i in range(3):
    for j in range(i, 3):
        q = 3 * rs[:, i] * rs[:, j]
        if i == j:
            q -= ds
        print("ELECTRONIC_QUADRUPOLE", i, j, (rho * q * grid.weights).sum())